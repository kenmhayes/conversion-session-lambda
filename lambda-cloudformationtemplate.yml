AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates lambda function and S3 bucket necessary for the file conversion functionality

Parameters:
  SessionTableName:
    Type: String
    Default: 'FileConversionSessions'
  ConversionRequestTableName:
    Type: String
    Default: 'FileConversionRequests'
  CreateSessionLambdaFunctionName:
    Type: String
    Default: 'CreateSession'
  LambdaSourceBucket:
    Type: String
    Default: 'code-artifacts-omni-file-converter'
  LambdaSourceKey:
    Type: String
    Default: 'ConversionSessionLambda-0.1.0.zip'
  RestAPIName:
    Type: String
    Default: 'ConversionSession'
  RestAPIProdStageName:
    Type: String
    Default: 'Prod'

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SessionTableDynamoDB'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !Sub 'arn:aws:dynamodb:*:*:table/${SessionTableName}'
                  - !Sub 'arn:aws:dynamodb:*:*:table/${ConversionRequestTableName}'
        - PolicyName: 'CloudWatchLogs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
  CreateSessionLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 'LambdaExecutionRole'
    Properties:
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: !Ref LambdaSourceKey
      Description: 'Creates a session of a file conversion request'
      Environment:
        Variables:
          SessionTableName: !Ref SessionTableName
          ConversionRequestTableName: !Ref ConversionRequestTableName
      Handler: 'conversionsession.handler.CreateSessionHandler::handleRequest'
      FunctionName: !Ref CreateSessionLambdaFunctionName
      MemorySize: 1024
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: 'java11'
      Timeout: 300
  RestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref RestAPIName
  CreateSessionResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: 'RestAPI'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt 'RestAPI.RootResourceId'
      PathPart: 'createsession'
  CreateSessionMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: 'CreateSessionResource'
    Properties:
      AuthorizationType: 'AWS_IAM'
      HttpMethod: 'ANY'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations'
          - Arn: !GetAtt 'CreateSessionLambdaFunction.Arn'
      RestApiId: !Ref RestAPI
      ResourceId: !Ref CreateSessionResource
  CreateSessionOptions:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: 'CreateSessionResource'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      Integration:
        Type: 'MOCK'
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      RestApiId: !Ref RestAPI
      ResourceId: !Ref CreateSessionResource
  RestAPIDeployment:
    DependsOn: 'CreateSessionMethod'
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestAPI
      StageName: !Ref RestAPIProdStageName
  CreateSessionLambdaPermissions:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - 'CreateSessionLambdaFunction'
      - 'CreateSessionMethod'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref CreateSessionLambdaFunctionName
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ":execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RestAPI
            - "/*/*/*"




